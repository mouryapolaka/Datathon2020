import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

import dash
import dash_core_components as dcc
import dash_bootstrap_components as dbc
import dash_html_components as html

from components import *
from dash.dependencies import Input, Output

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css', dbc.themes.BOOTSTRAP]

app = dash.Dash(__name__, external_stylesheets=external_stylesheets)
tab_styling = {'padding': '4px', 'text-align': 'center'}

#skills correlation dataset generated by item-based collaborative filtering technique
skill_corr_df = pd.read_csv('data/corr_matrix.csv', index_col = 'skill_name')

#skills dataset
skills_df = pd.read_csv('data/skills.csv')
skills_array = [{'label':i, 'value':i} for i in list(skills_df['skill_name'])]

#roles_skill dataset
roles_skills_df = pd.read_csv('data/roles_skills.csv')
roles_array = [{'label':i, 'value':i} for i in list(roles_skills_df['Title'].unique())]

#seek dataset
seek_df = pd.read_csv('data/seek_df.csv')
seek_df = seek_df[seek_df.geo != 'NZ']
cities_array = [{'label': i, 'value': i} for i in list(seek_df['city'].unique())]
categories_array = [{'label': i, 'value': i} for i in list(seek_df['category'].unique())]

# Page Elements
input_card = generate_card(
    [
        dcc.Tabs(id='tabs-example', value='tab-1', children=
        [
            dcc.Tab(label='Skill Recommendations', value='tab-1', style=tab_styling, selected_style=tab_styling),
            dcc.Tab(label='Most Valuable Skills by Role', value='tab-2', style=tab_styling, selected_style=tab_styling),
            dcc.Tab(label='Job Market by City', value='tab-3', style=tab_styling, selected_style=tab_styling),
            dcc.Tab(label='Job Type by City and Category', value='tab-4', style=tab_styling, selected_style=tab_styling),
        ], style={'font-size': '14px'}),
        html.Br(),
        html.Br(),
        html.Div(id='input-area')
    ]
)

graph_card = generate_card(
    [
        html.Div(id='graph-area'),
    ]
)

#HTML Layout
app.layout = html.Div([
    html.H1("Upskill", style={'text-align': 'center'}),
    html.Br(),
    html.Br(),
    dbc.Row(
    [
        dbc.Col(input_card, width=5),
        dbc.Col(graph_card, width=7),
    ], style={"margin": "0 48px"}
    )
])

#callback for screen tabs
@app.callback([Output('input-area', 'children'), Output('graph-area', 'children'),],
              [Input('tabs-example', 'value')])
def render_content(tab):
    if tab == 'tab-1':
        return generate_dropdown(
            label="Select your Current Skills:",
            id="select_skill",
            options=skills_array,
            default_value=['PYTHON'],
            multi=True
        ), html.Div(
            [
                html.Div(id='skill_recommendation_output_container', children=[], style={"padding": "0px"}),
                dcc.Graph(id='skills_recommender_plot', figure={})
            ]
        )
    elif tab == 'tab-2':
        return generate_dropdown(
            label="Select your Desired Role:",
            id="select_role",
            options=roles_array,
        ), html.Div(
            [
                html.Div(id='top_soft_skills_output_container', children=[]),
                dcc.Graph(id='top_soft_skills_plot', figure={}),
            ]
        )
    elif tab == 'tab-3':
        return generate_dropdown(
            label="Select your City:",
            id="select_city",
            options=cities_array,
            default_value="Brisbane"
        ), html.Div(
            [
                html.Div(id='city_category_output_container', children=[]),
                dcc.Graph(id='city_category_plot', figure={})
            ]
        )
    elif tab == 'tab-4':
        return html.Div(
            [
                generate_dropdown(
                    label="Select your City:",
                    id="select_city_pie",
                    options=cities_array,
                    default_value="Brisbane"
                ), 
                html.Br(),
                html.Br(),
                generate_dropdown(
                    label="Select your Work Category:",
                    id="select_category_pie",
                    options=categories_array,
                    default_value='Healthcare & Medical',
                )
            ]
        ), html.Div(
            [
                html.Div(id='city_cat_jobtype_container', children=[]),
                dcc.Graph(id='city_cat_jobtype_plot', figure={}),
            ]
        )

#callback for skills_recommender_plot based on skills
@app.callback(
    [Output(component_id='skill_recommendation_output_container', component_property='children'),
     Output(component_id='skills_recommender_plot', component_property='figure')],
    [Input(component_id='select_skill', component_property='value')]
)
def update_recommender_skill_chart(selected_skills):  

    container = None

    df = pd.DataFrame({'Skill' : [], 'Correlation' : [], 'CurrentSkill' : []})

    skills = []
    correlations = []
    current_skills = []

    for current_skill in selected_skills:
        x = skill_corr_df[current_skill]
        x = x.sort_values(ascending=False)
        
        for skill in list(x.keys()):
            skills.append(skill)

        for corr in list(x):
            correlations.append(corr)
        
        for cur_skill in x:
            current_skills.append(current_skill)

    df = pd.DataFrame({'Skill' : skills, 'Correlation' : correlations, 'CurrentSkill' : current_skills})

    fig = px.bar(df[1:11], x='CurrentSkill', y="Correlation", title=f"Recommended skills", color='Skill',barmode="group")

    return container, fig

#callback for top_soft_skills_plot based on role
@app.callback(
    [Output(component_id='top_soft_skills_output_container', component_property='children'),
     Output(component_id='top_soft_skills_plot', component_property='figure')],
    [Input(component_id='select_role', component_property='value')]
)
def update_top_skills_chart(selected_role):

    container = None

    temp_df = roles_skills_df[roles_skills_df['Title'] == selected_role].sort_values('Data Value', axis=0, ascending=False, inplace=False, kind='quicksort')

    df = pd.DataFrame({'Skill' : [], 'Rating' : []})
    df['Skill'] = [skill.capitalize() for skill in list(temp_df['Element Name'])]
    df['Rating'] = [rating for rating in list(temp_df['Data Value'])]

    fig = px.bar(df, x='Skill', y="Rating", title=f"Recommended skills for {selected_role}", color='Rating')
    fig.update_layout(xaxis_tickfont_size=7)

    return container, fig

#callback for city_category_plot
@app.callback(
    [Output(component_id='city_category_output_container', component_property='children'),
     Output(component_id='city_category_plot', component_property='figure')],
    [Input(component_id='select_city', component_property='value')]
)
def update_city_cat_plot(selected_city):

    container = None

    category_list = list(seek_df[seek_df['city'] == selected_city].category.unique())
    category_frequency = list(seek_df[seek_df['city'] == selected_city].category.value_counts())

    fig = go.Figure([go.Bar(x=category_list, y=category_frequency)])
    fig.update_layout(title=f"Job market in {selected_city}", xaxis_tickfont_size=7)


    return container, fig

#callback for city_cat_jobtype_plot
@app.callback(
    [Output(component_id='city_cat_jobtype_container', component_property='children'),
     Output(component_id='city_cat_jobtype_plot', component_property='figure')],
    [Input(component_id='select_city_pie', component_property='value'),
    Input(component_id='select_category_pie', component_property='value')]
)
def update_jobtype_plot(selected_city, selected_category):

    container = None

    fig = px.pie(seek_df.loc[(seek_df['city'] == selected_city) & (seek_df['category'] == selected_category)], names='job_type', title= f'Job analysis of {selected_category} in {selected_city}')

    return container, fig

if __name__ == '__main__':
    app.run_server(debug=True)